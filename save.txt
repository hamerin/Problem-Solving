class disjointSet {
 private:
  vector<int> uf;

 public:
  disjointSet(int N) {
    uf.clear();
    for (int i = 0; i <= N; i++) uf.push_back(i);
  }
  int find(int n) {
    if (n == uf[n]) return n;
    return uf[n] = find(uf[n]);
  }
  void merge(int u, int v) {
    uf[find(u)] = uf[find(v)];
    return;
  }
  bool isSameset(int u, int v) { return find(u) == find(v); }
};

//////////////////////////

inline i64 smod(i64 a, i64 m) { return ((a % m) + m) % m; }
inline i128 smod(i128 a, i128 m) { return ((a % m) + m) % m; }

i64 gcd(i64 a, i64 b) { return a ? gcd(b % a, a) : b; }

i128 getInv(i128 a, i128 b) {
  if (a <= 1)
    return a;
  else if (a > b)
    return getInv(smod(a, b), b);
  else
    return smod((-getInv(smod(b, a), a) * b + 1) / a, b);
}

i64 inv(i64 a, i64 b) { return gcd(a, b) == 1 ? getInv(a, b) : -1; }